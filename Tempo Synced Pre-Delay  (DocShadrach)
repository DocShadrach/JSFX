desc:Tempo Synced Pre-Delay (DocShadrach)

slider1:2<0,6,1{1/2,1/4,1/8,1/16,1/32,1/64,1/128}>Delay Sync (Beat Division)
slider2:0<0,2,1{Normal,Triplet,Dotted}>Note Type

@init
max_delay_samples = srate; // 1-second buffer based on sample rate
write_pos = 0;

// Create a single shared buffer for both channels
buffer = max_delay_samples * 2;

@slider
// Calculate time divisions
beat_divisions = 2^slider1;
triplet_multiplier = slider2 == 1 ? (2/3) : 1; // Triplet (2/3 multiplier)
dotted_multiplier = slider2 == 2 ? 1.5 : 1;   // Dotted (1.5 multiplier)
multiplier = triplet_multiplier * dotted_multiplier;

@sample
bpm = tempo ? tempo : 120; // Default BPM if unavailable

// Calculate delay time in samples
delay_time_ms = (60000 / bpm) / beat_divisions * 2 * multiplier;
delay_samples = min(max_delay_samples - 1, srate * delay_time_ms / 1000);

// Write input signal to the shared buffer for both channels
buffer[write_pos] = spl0; // Left channel
buffer[write_pos + max_delay_samples] = spl1; // Right channel

// Calculate read position for both channels
read_pos = write_pos - delay_samples;
read_pos < 0 ? read_pos += max_delay_samples;

// Interpolation for the left channel
pos_frac = read_pos - floor(read_pos);
prev_read_pos = floor(read_pos) % max_delay_samples;
next_read_pos = (prev_read_pos + 1) % max_delay_samples;

wet_left = (1 - pos_frac) * buffer[prev_read_pos] + pos_frac * buffer[next_read_pos];

// Interpolation for the right channel
wet_right = (1 - pos_frac) * buffer[prev_read_pos + max_delay_samples] + pos_frac * buffer[next_read_pos + max_delay_samples];

// Assign the processed delay signal to the output channels
spl0 = wet_left;
spl1 = wet_right;

// Advance the write position for the next sample
write_pos = (write_pos + 1) % max_delay_samples;

